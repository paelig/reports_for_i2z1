---
title: "README"
format: md
---

# Название

Введение в R

## Цель

1.  Развить практические навыки использования языка программирования R для обработки данных
2.  Развить навыки работы в Rstudio IDE:
    -   установка пакетов
    -   работа с проектами в Rstudio
    -   настройка и работа с Git
3.  Закрепить знания базовых типов данных языка R и простейших операций с ними

## Исходные данные

1.  Ноутбук
2.  Условие для практической работы

## Общий план выполнения

1.  Установить интерпретатор R
2.  Установить Rstudio IDE
3.  Установить программный пакет swirl
4.  Запустить задание с помощью swirl::swirl()
5.  Выбрать из меню курсов
6.  Запустить подкурсы и выполнить:
    -   базовые структурные блоки (Basic Building Blocks)
    -   рабочие пространства и файлы (Workspace and Files)
    -   последовательности чисел (Sequences of Numbers)
    -   векторы (Vectors)
    -   пропущенные значения (Missing Values)
7.  Составить отчет и выложить его и исходный qmd/rmd файл в свой репозиторий

### Шаг 1

Данный шаг был выполнен в предыдушей работе.

### Шаг 2

Данный шаг был выполнен в предыдушей работе.

### Шаг 3

Установим программный пакет swirl с помощью функции R install.packages("swirl")

![](img/img2_1.png)

Пакет установлен

![](img/img2_2.png)

### Шаг 4

Запустим задание с помощью команды swirl::swirl() ![](img/img2_3.png)

### Шаг 5

Выберём необходимый курс ![](img/img2_4.png)

### Шаг 6

#### Basic Building Blocks

Выберём необходимый подкурс базовые структурные блоки (Basic Building Blocks) ![](img/img2_5.png)

Вычислим сумму двух чисел:

```{r}
5 + 7
```

Запищем результат суммы в переменную:

```{r}
x <- 5 + 7
```

Выведём её значение:

```{r}
x
```

Введём новую переменную y с значением x - 3

```{r}
y <- x - 3
```

Выведём её значение

```{r}
y
```

Создадим вектор с(1.1, 9, 3.14)

```{r}
c(1.1, 9, 3.14)
```

Присвоим этот вектор переменной z

```{r}
z <- c(1.1, 9, 3.14)
```

```{r}
?c
```

Выведём значения из вектора

```{r}
z
```

```{r}
c(z, 555, z)
```

Арифметические операции с вектором:

```{r}
z * 2 + 100
```

Запишем результат в преременную my_sqrt:

```{r}
my_sqrt <- z * 2 + 100
```

Посмотрим как происходит вычисление корня

```{r}
sqrt(z - 1)
```

Запишем результат в переменную:

```{r}
my_sqrt <- sqrt(z - 1)
```

```{r}
my_sqrt
```

```{r}
my_div <- z/my_sqrt
```

```{r}
my_div
```

Сложение векторов

```{r}
c(1, 2, 3, 4) + c(0, 10)
```

```{r}
c(1, 2, 3, 4) + c(0, 10, 100)
```

Во вотром случае получаем ошибку, делаем вывод, что длина первого вектора должна быть кратна длине второго вектора

При помощи стрелочки вверх можно выводить предыдушие строки кода.

При помощи tab можно дописывать название переменной, если она была использовани ранее.

![](img/img2_6.png)

#### Workspace and Files

Путь по файла:

```{r}
getwd()
```

Объявленные переменные:

```{r}
ls()
```

```{r}
x <- 9
```

```{r}
ls()
```

Файлы в дирректории:

```{r}
list.files()
```

```{r}
?list.files()
```

Возможные аргументы функции:

```{r}
args(list.files)
```

Запишем данную дирректорию в переменную old.dir:

```{r}
old.dir <- getwd()
```

Создадим новую дирректорию:

```{r}
dir.create("testdir")
```

Перейдём в эту дирректорию:

```{r}
setwd("testdir")
```

Создадим новый файл:

```{r}
file.create("mytest.R")
```

Проверим, что файл создан:

```{r}
list.files()
```

Проверим, что файл существует:

```{r}
file.exists("mytest.R")
```

Посмотрим информацию о файле:

```{r}
file.info("mytest.R")
```

Переименуем файл:

```{r}
file.rename("mytest.R", "mytest2.R")
```

Скопируем файл:

```{r}
file.copy("mytest2.R", "mytest3.R")
```

Укажем относительный путь до файла:

```{r}
file.path("mytest3.R")
```

Создадим новые папки:

```{r}
file.path("folder1", "folder2")
```

Создадим одну папку в другой:

```{r}
 dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
```

Вернёмся в исходную дирректореторию

```{r}
setwd(old.dir)
```

#### Sequences of Numbers

Сгенерируем числа от 1 до 20:

```{r}
1:20
```

Сгенерируем 10 дробных чисел:

```{r}
pi:10
```

Сгенерируем числа от 15 до 1:

```{r}
15:1
```

Сгенерируем числа от 1 до 20 с шагом 1 при помощи функции seq:

```{r}
seq(1, 20)
```

Сгенерируем числа от 1 до 10 с шагом 0.5 при помощи функции seq:

```{r}
seq(0, 10, by=0.5)
```

Сгенерируем 30 чисел от 5 до 10:

```{r}
seq(5, 10, length=30)
```

Запишем это значение в переменную my_seq:

```{r}
my_seq <- seq(5, 10, length=30)
```

Посмотрим длину полученной переменной:

```{r}
length(my_seq)
```

Сгенерируем числа от 1 до длины переменной my_seq:

```{r}
1:length(my_seq)
```

```{r}
seq(along.with = my_seq)
```

```{r}
seq_along(my_seq)
```

Сгенерируем вектор длиною 40 со всеми нулями:

```{r}
rep(0, times = 40)
```

Сгенерируем вектор длиною 10 со значениями из вектора (0, 1, 2)

```{r}
rep(c(0, 1, 2), times = 10)
```

Теперь хотим получить в резцльтате отсортированные значения:

```{r}
rep(c(0, 1, 2), each = 10)
```

#### Vectors

Создадим вектор с значениями 0.5, 55, -10, 6

```{r}
c(0.5, 55, -10, 6)
```

```{r}
num_vect <- c(0.5, 55, -10, 6)
```

```{r}
num_vect < 1
```

```{r}
tf <- num_vect < 1
```

```{r}
tf
```

```{r}
num_vect >= 6
```

Создадим вектор из строк:

```{r}
my_char <- c("My", "name", "is")
```

```{r}
my_char
```

Выведём значения из вектора:

```{r}
paste(my_char, collapse = " ")
```

Добавим имя в полученный вектор:

```{r}
c(my_char, "El")
```

```{r}
my_name <- c(my_char, "El")
```

```{r}
my_name
```

```{r}
paste(my_name, collapse = " ")
```

Соедининение нескольких строк:

```{r}
paste("Hello", "world!", sep = " ")
```

Соединение нескольких векторов:

```{r}
paste(1:3, c("X", "Y", "Z"), sep = "")
```

```{r}
paste(LETTERS, 1:4, sep = "-")
```

#### Missing Values

```{r}
x <- c(44, NA, 5, NA)
```

```{r}
x * 3
```

```{r}
y <- rnorm(1000)
```

```{r}
z <- rep(NA, 1000)
```

```{r}
my_data <- sample(c(y, z), 100)
```

```{r}
my_na <- is.na(my_data)
```

```{r}
my_na
```

```{r}
my_data == NA
```

```{r}
sum(my_na)
```

```{r}
my_data
```

```{r}
0/0
```

```{r}
Inf - Inf
```

Все задания выполнены 