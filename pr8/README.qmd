---
title: "PR8"
format: md
---

# Название

Анализ данных сетевого трафика с использованием аналитической in-memory СУБД DuckDB
 
## Цель

1.  Изучить возможности СУБД DuckDB для обработки и анализ больших данных
2.  Получить навыки применения DuckDB совместно с языком программирования R
3.  Получить навыки анализа метаинфомации о сетевом трафике
4.  Получить навыки применения облачных технологий хранения, подготовки и анализа данных: Yandex Object Storage, Rstudio Server.

## Исходные данные

1.  Ноутбук
2.  Условие для практической работы

## Общий план выполнения

1.  Настроить подключение по ssh к RStudio Server
2.  Импортировать данные
3.  Поиск утечек
4.  Написать отчет

### Шаг 1

Скачаем ключ и изменим у него права доступа.

Подключимся используя команду:

```         
ssh -i <путь к ключу> -L port:127.0.0.1:port user<ВашНомер>@ip-address
```

Изменим пароль для своего пользователя.

Зайдём в RStudio по адресу: 127.0.0.1:port. Импортируем свой проект из гита. Теперь всё готово для работы!

### Шаг 2
 
Загрузим данные с облака

``` r
download.file("https://storage.yandexcloud.net/arrow-datasets/tm_data.pqt", destfile = "tm_data.pqt")
```

Установим необходимые пакеты:

``` r
install.packages("DBI")
```

Подключим необходимые библиотеки:

```{r}
library(arrow)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(duckdb)
```
 
### Шаг 3

#### Задание 1

*Важнейшие документы с результатами нашей исследовательской деятельности в области создания вакцин скачиваются в виде больших заархивированных дампов. Один из хостов в нашей сети используется для пересылки этой информации – он пересылает гораздо больше информации на внешние ресурсы в Интернете, чем остальные компьютеры нашей сети. Определите его IP-адрес.*

Подготовим данные для дальнейшей обработки.

```{r}
con <- dbConnect(duckdb::duckdb())
ishod <- dbGetQuery(con, "SELECT * FROM read_parquet('tm_data.pqt') 
                          WHERE (src LIKE '12.%' or src LIKE '13.%' or src LIKE '14.%') 
                                AND 
                                (dst NOT LIKE '12.%' AND 
                                  dst NOT LIKE '13.%' AND dst NOT LIKE '14.%');")
ishod %>% nrow()
```
```{r}
ishod %>% 
  group_by(src) %>%
  summarise('sb' = sum(bytes)) %>%
  arrange(desc(sb)) %>%
  head(1) %>%
  select(src) %>%
  collect()
```

#### Задание 2

*Другой атакующий установил автоматическую задачу в системном планировщике cron для экспорта содержимого внутренней wiki системы. Эта система генерирует большое количество трафика в нерабочие часы, больше чем остальные хосты. Определите IP этой системы.*

*Известно, что ее IP адрес отличается от нарушителя из предыдущей задачи.*

Подготовим данные для задания, исключим из базы данные с ip-адресом из прошлой задачи.

```{r}
ishod <- dbGetQuery(con, "SELECT * FROM read_parquet('tm_data.pqt') 
                          WHERE src != '13.37.84.125'
                                AND
                                (src LIKE '12.%' or src LIKE '13.%' or src LIKE '14.%') 
                                AND 
                                (dst NOT LIKE '12.%' AND 
                                  dst NOT LIKE '13.%' AND dst NOT LIKE '14.%');")
ishod %>% nrow()
```
 
Определим какие часы будут рабочими для организации. Для этого посмотрим, сколько информации передаётся в каждый час.

```{r}
df_hours <- ishod %>% 
  mutate(hour = hour(as_datetime(timestamp/1000))) %>%
  group_by(hour) %>%
  summarise('sb' = sum(bytes))%>%
  collect()
ggplot(data = df_hours, aes(x = hour, y = sb)) + 
  geom_line() +
  geom_point(color="green")
```

Видим, что рабочими являются часы с 16 по 23.

Посмотрим, сколько информации в среднем передаётся с одного хоста в каждый час.

```{r}
df_bytes_for_hours <- ishod %>% 
  mutate(hour = hour(as_datetime(timestamp/1000))) %>%
  group_by(hour) %>%
  summarise('sb' = sum(bytes), col = n(), bfh = sb/col)%>% 
  collect()
ggplot(data = df_bytes_for_hours, aes(x = hour, y = bfh)) + 
  geom_line() +
  geom_point(color="green")
```
 

Анамальное соотношение количества передаваемой информации к количеству записей происходит в 7 час, который не является рабочим. Предположим, что утечка происходит в этот час.

```{r}
ishod %>% 
  mutate(hour = hour(as_datetime(timestamp/1000))) %>%
  filter(hour == 7) %>%
  group_by(src) %>%
  summarise(sb = sum(bytes)) %>%
  arrange(desc(sb)) %>%
  head(1) %>%
  collect()
```

Предположим, что источником утечки является хост 12.55.77.96. Посмотрим, топ-3 тех, кто отправляет информацию в нерабочие часы.

```{r}
ishod %>% 
  mutate(hour = hour(as_datetime(timestamp/1000))) %>%
  filter(hour < 16) %>%
  group_by(src) %>%
  summarise(sb = sum(bytes)) %>%
  arrange(desc(sb)) %>%
  head(3) %>%
  collect()
```

Посмотрим распледение количества передаваемой информации по часам.

```{r}
df1 <- ishod %>% 
  mutate(hour = hour(as_datetime(timestamp/1000))) %>%
  filter(src == "12.55.77.96")%>% 
  group_by(hour) %>%
  summarise(sb = sum(bytes)) %>%
  collect()
ggplot(data = df1, aes(x = hour, y = sb)) + 
  geom_line() +
  geom_point(color="green")

df2 <- ishod %>% 
  mutate(hour = hour(as_datetime(timestamp/1000))) %>%
  filter(src == "13.48.72.30")%>% 
  group_by(hour) %>%
  summarise(sb = sum(bytes)) %>%
  collect()
ggplot(data = df2, aes(x = hour, y = sb)) + 
  geom_line() +
  geom_point(color="blue")

df3 <- ishod %>% 
  mutate(hour = hour(as_datetime(timestamp/1000))) %>%
  filter(src == "14.51.30.86")%>% 
  group_by(hour) %>%
  summarise(sb = sum(bytes)) %>%
  collect()
ggplot(data = df3, aes(x = hour, y = sb)) + 
  geom_line() +
  geom_point(color="red")
```
 
Видим, что поведение хоста 12.55.77.96 анамально, а распределение передаваемого объёма информации для двух других хостов близко к среднему распределению по часам.

#### Задание 3

*Еще один нарушитель собирает содержимое электронной почты и отправляет в Интернет используя порт, который обычно используется для другого типа трафика. Атакующий пересылает большое количество информации используя этот порт, которое нехарактерно для других хостов, использующих этот номер порта.*

*Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителей из предыдущих задач.*

```{r}
ishod <- dbGetQuery(con, "SELECT * FROM read_parquet('tm_data.pqt') 
                          WHERE src != '13.37.84.125'
                                AND
                                src != '12.55.77.96'
                                AND
                                (src LIKE '12.%' or src LIKE '13.%' or src LIKE '14.%') 
                                AND 
                                (dst NOT LIKE '12.%' AND 
                                  dst NOT LIKE '13.%' AND dst NOT LIKE '14.%');")
ishod %>% nrow()
```

Сгруппируем данные по портам и рассчитаем следующие значения: 
  - mean - среднее значение для bytes 
  - med - медианное значение для bytes 
  - min - минимальное значение для bytes 
  - max - максимальное значение для bytes 
  - aver - среднее значение для max и min 
  - r - разница между aver и mean

Если r = 0, то поведение всех хостов стандартно и выбраса в этих данных нет, значит эти порты нас не интересуют.

```{r}
ports <- ishod %>% 
  group_by(port) %>%
  summarise(mean = mean(bytes), 
            med = median(bytes), 
            min = min(bytes),
            max = max(bytes),
            aver = (min+max)/ 2,
            r = abs(aver-mean)) %>%
  filter(r != 0) %>%
  select(port, mean, med, aver, min, max) %>%
  arrange(aver)%>%
  collect()

ports %>% head(5)

ports %>% tail(5)
```
 

Проанализируем первый и последний порт.

Найдём среднее значение по порту.

```{r}
m_124 <- ports %>%
  filter(port == 124) %>%
  select(med) %>%
  collect()

m_124 %>% as.double()
```

Видим, что средним значениея является 42. Найдём для каждого хоста отклонение от среднего значения по пору.

```{r}
df_124 <- ishod %>% 
  filter(port==124) %>%
  group_by(src) %>%
  summarise(min = min(bytes), 
            max = max(bytes), 
            aver = (min+max)/2,
            ot = as.double(aver - m_124)) %>%
  arrange(desc(ot)) %>%
  select(src, ot) %>%
  head(5) %>%
  collect()

df_124
```

```{r}
ggplot(data = df_124, aes(x = src, y = ot)) + 
  geom_point(color="green")
```

Видим, что со всех хостов кроме одного идёт стандартный трафик. Отличающимся является хост 12.30.96.87.
 
Проанализируем следующий за 124 порт. Для этого проделаем аналогичные действия.

```{r}
m_79 <- ports %>%
  filter(port == 79) %>%
  select(med) %>%
  collect()
m_79 %>% as.double()
```

```{r}
df_79 <- ishod %>% 
  filter(port==79) %>%
  group_by(src) %>%
  summarise(min = min(bytes), 
            max = max(bytes), 
            aver = (min+max)/2,
            ot = as.double(aver - m_79)) %>%
  arrange(desc(ot)) %>%
  select(src, aver, ot) %>%
  head(20) %>%
  collect()

df_79
```

```{r}
ggplot(data = df_79, aes(x = src, y = ot)) + 
  geom_point(color="green")
```
 
Видим, что нет какого-то характерного поведения для хостов и нет скачка в разнице, а разница уменьшается постепенно.

Проанализируем последний порт. Анализ проведём аналогично.

```{r}
m_37 <- ports %>%
  filter(port == 37) %>%
  select(med) %>%
  collect()

m_37 %>% as.double()
```
 
```{r}
df_37 <- ishod %>% 
  filter(port==37) %>%
  group_by(src) %>%
  summarise(min = min(bytes), 
            max = max(bytes), 
            aver = (min+max)/2,
            ot = as.double(aver - m_37)) %>%
  arrange(desc(ot)) %>%
  select(src, aver, ot) %>%
  head(20) %>%
  collect()

df_37
```
```{r}
ggplot(data = df_37, aes(x = src, y = ot)) + 
  geom_point(color="green")
```

Видим, что есть нехарактерное поведение для хоста 13.38.72.85.

Проведём сравнение с предыдушем портом.

```{r}
m_39 <- ports %>%
  filter(port == 39) %>%
  select(med) %>%
  collect()

m_39 %>% as.double()
```
 
```{r}
df_39 <- ishod %>% 
  filter(port==39) %>%
  group_by(src) %>%
  summarise(min = min(bytes), 
            max = max(bytes), 
            aver = (min+max)/2,
            ot = as.double(aver - m_39)) %>%
  arrange(desc(ot)) %>%
  select(src, aver, ot) %>%
  head(20) %>%
  collect()

df_39
```

```{r}
ggplot(data = df_39, aes(x = src, y = ot)) + 
  geom_point(color="green")
```

Видим, что нет значительного выброса, а разница уменьшается постепенно.

Таким образом, нехарактерное поведение у двух хостов:

```{r}
df_124 %>% head(1)
```
```{r}
df_37 %>% head(1)
```

### Шаг 4

Отчёт написан и офомлен